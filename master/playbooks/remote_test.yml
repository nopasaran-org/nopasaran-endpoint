- name: Execute Python script on host
  hosts: all
  remote_user: master
  gather_facts: false
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=10m -o Compression=yes"

  tasks:
    - name: Generate a random folder name and run the script
      become: true
      shell: |
        random_folder_name="nopasaran_$(date +%Y%m%dT%H%M%S.%6N)_$(head /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 12)"
        base_path="/tmp/${random_folder_name}"
        test_full_path="${base_path}/{{ test_folder }}"

        # Clone the repository (using shallow clone for speed)
        git clone --depth 1 -b main "{{ github_repo_url }}" "${base_path}"

        # Create variables.json if variables are defined
        if [ "{{ variables | default('') }}" != "" ]; then
          echo '{{ variables | to_json }}' > "${test_full_path}/variables.json"
        fi

        # Create controller_configuration.json
        cat <<EOF > "${test_full_path}/controller_configuration.json"
        {
          "ROOT_CERTIFICATE": "/x509/ca.pem",
          "PRIVATE_CERTIFICATE": "/x509/private_crt.pem",
          "DESTINATION_IP": "{{ remote_control_channel_end }}",
          "SERVER_PORT": "1957"
        }
        EOF

        # Ensure /app/venv/bin is in the PATH and run the command
        export PATH=/app/venv/bin:$PATH

        # Change directory to the path specified by the variable test_full_path
        cd "${test_full_path}"

        # Check if the "required" field exists and is a dictionary
        if jq -e '.required | type == "object"' variables.json > /dev/null; then
            # Extract the "required" dictionary
            required_dict=$(jq -c '.required' variables.json)
            
            # Pass the dictionary to the Python script
            python /app/resources/required_preprocessing.py "$required_dict"
        else
            echo "The 'required' field does not exist or is not a dictionary."
        fi

        # Execute the nopasaran test
        nopasaran -t MAIN.json -ll info

        # Perform postprocessing actions after the nopasaran test
        python /app/resources/required_postprocessing.py

        # Output folder name for use in the next task
        echo "${random_folder_name}"
      register: execution_result

    - name: Set random_folder_name fact
      set_fact:
        random_folder_name: "{{ execution_result.stdout_lines[0] }}"

    - name: Copy logs to the local machine
      fetch:
        src: "/tmp/{{ random_folder_name }}/{{ test_folder }}/conf.log"
        dest: "/results/{{ final_output_directory }}/conf.log"
        flat: yes
        remote_src: yes
